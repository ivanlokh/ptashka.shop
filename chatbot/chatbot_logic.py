import re
import random
from typing import Dict, List, Any
from .models import ChatSession

class ChatbotProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç–±–æ—Ç–∞"""
    
    def __init__(self):
        self.greetings = [
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑ –≤–∏–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
            "–í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
            "–ü—Ä–∏–≤—ñ—Ç! –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –ø–æ–∫—É–ø–∫–∞–º–∏. –©–æ —à—É–∫–∞—î—Ç–µ?",
            "–í—ñ—Ç–∞—é –≤ Ptashka.shop! –Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏."
        ]
        
        self.goodbyes = [
            "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è, —è–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è!",
            "–ë—É–ª–æ –ø—Ä–∏—î–º–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è! –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—Å!",
            "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –£–¥–∞—á–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫!",
            "–ü–æ–±–∞—á–∏–º–æ—Å—è! –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ - —è —Ç—É—Ç!"
        ]
        
        self.help_responses = [
            "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑:\n‚Ä¢ –ü–æ—à—É–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤\n‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É\n‚Ä¢ –°—Ç–∞—Ç—É—Å–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤",
            "–û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏:\n‚Ä¢ –ó–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é\n‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏\n‚Ä¢ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É"
        ]
        
        self.product_keywords = {
            '—Ç–µ–ª–µ—Ñ–æ–Ω': ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–º–æ–±—ñ–ª—å–Ω–∏–π', '–∞–π—Ñ–æ–Ω', '—Å–∞–º—Å—É–Ω–≥'],
            '–Ω–æ—É—Ç–±—É–∫': ['–Ω–æ—É—Ç–±—É–∫', '–ª–∞–ø—Ç–æ–ø', '–∫–æ–º–ø\'—é—Ç–µ—Ä', 'macbook'],
            '–Ω–∞–≤—É—à–Ω–∏–∫–∏': ['–Ω–∞–≤—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω—ñ—Ç—É—Ä–∞', 'airpods', '–±–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ'],
            '–∫–∞–º–µ—Ä–∞': ['–∫–∞–º–µ—Ä–∞', '—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç', '–≤—ñ–¥–µ–æ–∫–∞–º–µ—Ä–∞', '–∑–µ—Ä–∫–∞–ª–∫–∞'],
            '—Ç–µ–ª–µ–≤—ñ–∑–æ—Ä': ['—Ç–µ–ª–µ–≤—ñ–∑–æ—Ä', '—Ç–≤', '–º–æ–Ω—ñ—Ç–æ—Ä', '–µ–∫—Ä–∞–Ω']
        }
        
        self.delivery_keywords = ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–∏—Ç–∏', '–∫–æ–ª–∏', '—à–≤–∏–¥–∫–æ', '—Ç–µ—Ä–º—ñ–Ω']
        self.payment_keywords = ['–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç—ñ–∂', '–≥—Ä–æ—à—ñ', '—Ü—ñ–Ω–∞', '–∫–æ—à—Ç—É—î']
        self.return_keywords = ['–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è', '–æ–±–º—ñ–Ω', '–≥–∞—Ä–∞–Ω—Ç—ñ—è', '–Ω–µ –ø—ñ–¥—ñ–π—à–æ–≤']
    
    def process_message(self, message: str, session_id: str) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        message_lower = message.lower().strip()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó
        context = self._get_session_context(session_id)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
        intent = self._classify_intent(message_lower)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = self._generate_response(message_lower, intent, context)
        
        return response
    
    def _get_session_context(self, session_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–µ—Å—ñ—ó"""
        try:
            session = ChatSession.objects.get(session_id=session_id)
            return session.context
        except ChatSession.DoesNotExist:
            return {}
    
    def _classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if any(word in message for word in ['–ø—Ä–∏–≤—ñ—Ç', '–≤—ñ—Ç–∞—é', '–¥–æ–±—Ä–∏–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É', '–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞']):
            return 'greeting'
        elif any(word in message for word in ['–¥–æ–ø–æ–º–æ–≥–∞', '–¥–æ–ø–æ–º–æ–∂–∏', '—â–æ –º–æ–∂–µ—à', '—Ñ—É–Ω–∫—Ü—ñ—ó']):
            return 'help'
        elif any(word in message for word in ['–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è', '–±—É–≤–∞–π', '–ø–æ–∫–∞', '—Å–ø–∞—Å–∏–±—ñ']):
            return 'goodbye'
        elif any(word in message for word in self.delivery_keywords):
            return 'delivery'
        elif any(word in message for word in self.payment_keywords):
            return 'payment'
        elif any(word in message for word in self.return_keywords):
            return 'return'
        elif any(word in message for word in ['—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', '–∫—É–ø–∏—Ç–∏', '–∑–∞–º–æ–≤–∏—Ç–∏']):
            return 'product'
        elif self._detect_product_category(message):
            return 'product'
        else:
            return 'general'
    
    def _generate_response(self, message: str, intent: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–º—ñ—Ä—É"""
        
        if intent == 'greeting':
            return {
                'message': random.choice(self.greetings),
                'suggestions': ['–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', '–ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏', '–î–æ–ø–æ–º–æ–≥–∞ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º'],
                'metadata': {'intent': 'greeting'}
            }
        
        elif intent == 'help':
            return {
                'message': random.choice(self.help_responses),
                'suggestions': ['–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤', '–î–æ—Å—Ç–∞–≤–∫–∞', '–û–ø–ª–∞—Ç–∞', '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è'],
                'metadata': {'intent': 'help'}
            }
        
        elif intent == 'goodbye':
            return {
                'message': random.choice(self.goodbyes),
                'suggestions': [],
                'metadata': {'intent': 'goodbye'}
            }
        
        elif intent == 'delivery':
            return {
                'message': "üöö **–î–æ—Å—Ç–∞–≤–∫–∞ –≤ Ptashka.shop:**\n\n‚Ä¢ **–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞** –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 1000 –≥—Ä–Ω\n‚Ä¢ **–®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞** 1-2 –¥–Ω—ñ –ø–æ –ö–∏—î–≤—É\n‚Ä¢ **–ù–æ–≤–∞ –ü–æ—à—Ç–∞** - –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ\n‚Ä¢ **–°–∞–º–æ–≤–∏–≤—ñ–∑** –∑ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤\n\n–•–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
                'suggestions': ['–í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É', '–°–∞–º–æ–≤–∏–≤—ñ–∑'],
                'metadata': {'intent': 'delivery'}
            }
        
        elif intent == 'payment':
            return {
                'message': "üí≥ **–°–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏:**\n\n‚Ä¢ **–ö–∞—Ä—Ç–æ—é –æ–Ω–ª–∞–π–Ω** - Visa, Mastercard\n‚Ä¢ **–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂** - –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n‚Ä¢ **–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑**\n‚Ä¢ **–†–æ–∑—Å—Ç—Ä–æ—á–∫–∞** - 0% –Ω–∞ 6 –º—ñ—Å—è—Ü—ñ–≤\n\n–í—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ!",
                'suggestions': ['–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–†–æ–∑—Å—Ç—Ä–æ—á–∫–∞', '–ë–µ–∑–ø–µ–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤'],
                'metadata': {'intent': 'payment'}
            }
        
        elif intent == 'return':
            return {
                'message': "üîÑ **–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –æ–±–º—ñ–Ω:**\n\n‚Ä¢ **14 –¥–Ω—ñ–≤** –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è\n‚Ä¢ **–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π** –æ–±–º—ñ–Ω —Ä–æ–∑–º—ñ—Ä—É\n‚Ä¢ **–ì–∞—Ä–∞–Ω—Ç—ñ—è** –Ω–∞ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏\n‚Ä¢ **–®–≤–∏–¥–∫–∞** –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫\n\n–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º?",
                'suggestions': ['–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è', '–ì–∞—Ä–∞–Ω—Ç—ñ—è', '–û–±–º—ñ–Ω —Ç–æ–≤–∞—Ä—É'],
                'metadata': {'intent': 'return'}
            }
        
        elif intent == 'product':
            # –°–ø—Ä–æ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É
            category = self._detect_product_category(message)
            if category:
                return {
                    'message': f"üîç –ó–Ω–∞–π—à–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: **{category}**\n\n–û—Å—å –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n‚Ä¢ –¢–æ–ø–æ–≤—ñ –º–æ–¥–µ–ª—ñ\n‚Ä¢ –ê–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n‚Ä¢ –ù–æ–≤–∏–Ω–∫–∏\n\n–•–æ—á–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏?",
                    'suggestions': [f'–ü–æ–∫–∞–∑–∞—Ç–∏ {category}', '–ê–∫—Ü—ñ—ó', '–ù–æ–≤–∏–Ω–∫–∏', '–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏'],
                    'metadata': {'intent': 'product', 'category': category}
                }
            else:
                return {
                    'message': "üõçÔ∏è **–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤:**\n\n–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑–Ω–∞–π—Ç–∏:\n‚Ä¢ –ó–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É\n‚Ä¢ –ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é\n‚Ä¢ –ó–∞ –±—Ä–µ–Ω–¥–æ–º\n‚Ä¢ –ó–∞ —Ü—ñ–Ω–æ—é\n\n–©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
                    'suggestions': ['–¢–µ–ª–µ—Ñ–æ–Ω–∏', '–ù–æ—É—Ç–±—É–∫–∏', '–ù–∞–≤—É—à–Ω–∏–∫–∏', '–ö–∞–º–µ—Ä–∏', '–¢–µ–ª–µ–≤—ñ–∑–æ—Ä–∏'],
                    'metadata': {'intent': 'product'}
                }
        
        else:
            return {
                'message': "ü§î –ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
                'suggestions': ['–î–æ–ø–æ–º–æ–≥–∞', '–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤', '–î–æ—Å—Ç–∞–≤–∫–∞', '–û–ø–ª–∞—Ç–∞', '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è'],
                'metadata': {'intent': 'general'}
            }
    
    def _detect_product_category(self, message: str) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        for category, keywords in self.product_keywords.items():
            if any(keyword in message for keyword in keywords):
                return category.title()
        return None
